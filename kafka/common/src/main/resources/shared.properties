#1=(default) all ordered items are available in stock microservice (complete success)
#-1=no ordered items are available in stock microservice (complete failure)
order.status.stock=1
#1=(default) all ordered payments are approved in payment microservice (complete success)
#-1=no ordered payments are approved in payment microservice (complete failure)
order.status.payment=-1
#for the sake of this example, new orders and items from stock microservice will generate item number based
# on the below prefix (in a real case scenario this naive strategy shouldn't be used)
item.number.prefix=itemnumber
#max items allowed when generating orders (total of items rather than items per order)
max.items.allowed=1000

spring.kafka.bootstrap-servers=localhost:29092
topic.name.order=t_order
topic.name.payment=t_payment
topic.name.stock=t_stock
topic.name.notification=t_notification

kafka.join.window.duration.ms=120000

###Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

###Stream
spring.kafka.streams.bootstrap-servers=localhost:29092
spring.kafka.streams.properties.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.kafka.streams.properties.default.value.serde=org.springframework.kafka.support.serializer.JsonSerde
spring.kafka.streams.properties.spring.json.trusted.packages="*"
spring.kafka.streams.state-dir=/tmp/streams/1
spring.kafka.streams.cleanup.on-shutdown=true

###Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest

#logging
logging.level.com.sylleryum=DEBUG